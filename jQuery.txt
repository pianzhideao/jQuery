<script type="text/javascript" src="http://libs.baidu.com/jquery/1.9.1/jquery.js"></script>//jQuery引入


当页面加载完成后，在页面中以居中的方式显示“您好！通过慕课网学习 jQuery 才是最佳的途径”字样：$(document).ready(function() {
               $("div").html("您好！通过慕课网学习jQuery才是最佳的途径。")
            });


添加文字、改变样式：
var $p = $('#imooc');
$p.html('您好！通过慕课网学习jQuery才是最佳的途径').css('color','red');


利用数组下标的方式读取到jQuery中的DOM对象，jQuery对象自身提供一个.get() 方法允许我们直接访问jQuery对象中相关的DOM节点，get方法中提供一个元素的索引：
<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <title></title>
    <script src="http://libs.baidu.com/jquery/1.9.1/jquery.min.js"></script>
</head>

<body>
	<div>元素一</div>
	<div>元素二</div>
	<div>元素三</div>
    
    <script type="text/javascript">
		var $div = $('div'); //jQuery对象
		for(var i=0;i<$div.length;i++){
		    var div = $div.get(i);
		    div.style.color = 'red'; //操作dom对象的属性
		}
		
    </script>
    
</body>

</html> 


如果传递给$(DOM)函数的参数是一个DOM对象，jQuery方法会把这个DOM对象给包装成一个新的jQuery对象
var div = document.getElementsByTagName('div'); //dom对象
            
		    //将dom节点div转化为$div的jquery对象
            var $div =$(div)
            
			var $last = $div.last(); //找到第一个div元素
			$last.css('color', 'red'); //给第一个元素设置颜色

id选择器：一个用来查找的ID，即元素的id属性：$( "#id" )
注：id是唯一的，每个id值在一个页面中只能使用一次。如果多个元素分配了相同的id，将只匹配该id选择集合的第一个DOM元素。但这种行为不应该发生;有超过一个元素的页面使用相同的id是无效的


类选择器，顾名思义，通过class样式类名来获取节点：$( ".class" )


jQuery可以直接获取标签，例如： $("p")


jQuery选择器之全选择器（*选择器）：$( "*" )


选择器                    描述

$("parent>child")         子选择器：选择所有制定"parent"元素中指定的"child"的直接子元素。

$("ancestor descendant")   后代选择器：选择给定的子孙元素的所有后代元素，一个元素的后代可能是该元素的一个孩子、孙子、曾孙等。

$("prev+next")		   相邻兄弟选择器：选择所有紧接在"prev"元素后的"next"元素

$("prev~siblings")         一般兄弟选择器：匹配"prev"元素后的所有兄弟元素。具有相同的父元素，并匹配过滤"siblings"选择器。



很多时候我们不能直接通过基本选择器与层级选择器找到我们想要的元素，为此jQuery提供了一系列的筛选选择器用来更快捷的找到所需的DOM元素。筛选选择器很多都不是CSS的规范，而是jQuery自己为了开发者的便利延展出来的选择器

筛选选择器的用法与CSS中的伪元素相似，选择器用冒号“：”开头，通过一个列表，看看基本筛选器的描述：

选择器              描述

$(":first")         匹配第一个元素

$(":last")          匹配最后一个元素

$(":not(selector)") 一个用来过滤的选择器，选择所有元素去除不匹配给定的选择器元素

$(":eq(index)")     在匹配的集合中选择索引值为index的元素

$(":gt(index)")     选择匹配集合中所有大于给定index（索引值）的元素

$(":even")          选择索引值为偶数的元素，从零开始计数

$(":odd")           选择索引值为奇数的元素，从零开始计数

$(":lt(index)")     选择匹配集合中所有索引值小于给定index参数的元素

$(":header")        选择所有标题元素，像h1,h2,h3等

$(":lang(language)") 选择指定语言的所有元素

$(":root")           选择该文档的根元素

$(":animated")       选择正在执行动画效果的元素



jQuery选择器之内容筛选选择器：

选择器                 描述

$(":contains(text)")   选择所有包含指定文本的元素

$(":parent")           选择所有含有子元素或者文本的元素

$(":empty")            选择所有没有子元素的元素（包含文本节点）

$(":has(selector)")    选择元素中至少包含指定选择器的元素

注意事项：

:contains与:has都有查找的意思，但是contains查找包含“指定文本”的元素，has查找包含“指定元素”的元素
如果:contains匹配的文本包含在元素的子元素中，同样认为是符合条件的。
:parent与:empty是相反的，两者所涉及的子元素，包括文本节点



jQuery选择器之可见性筛选选择器：

选择器          描述

$(":visible")   选择所有显示的元素

$(":hidden")    选择所有隐藏的元素

如果元素中占据文档中一定的空间,元素被认为是可见的。
可见元素的宽度或高度，是大于零。
元素的visibility: hidden 或 opacity: 0都被认为是可见的，因为他们仍然占用空间布局。



jQuery选择器之属性筛选选择器

属性选择器让你可以基于属性来定位一个元素。可以只指定该元素的某个属性，这样所有使用该属性而不管它的值，这个元素都将被定位，也可以更加明确并定位在这些属性上使用特定值的元素，这就是属性选择器展示它们的威力的地方。
 
选择器                                       描述

$("[attribute|='value']")                    选择指定属性值等于给定字符串或以该文字串为前缀（该字符串后跟一个连字符“-”）的元素

$("[attribute*='value']")                    选择指定属性具有包含一个给定的字符串的元素（选择给定的属性是以包含某些值的元素）

$("[attribute~='value']")                    选择指定属性用空格分隔的值中包含一个给定值的元素

$("[attribute='value']")                     选择指定属性是给指定的元素

$("[attribute!='value']")                    选择不存在指定属性，或者指定的属性值不等于给定的元素

$("[attribute^='value']")                    选择指定属性是以给定字符串开始的元素

$("[attribute$='value']")                    选择指定属性是以给定值结尾的元素，这个比较是区分大小写的

$("[attribute]")                             选择所有具有指定属性的元素，改属性可以是任何值

$("[attributeFilter1][attributeFilterN]")    选择匹配所有指定的属性筛选器的元素


        

jQuery选择器之子元素筛选选择器：

子元素筛选选择器不常使用，其筛选规则比起其它的选择器稍微要复杂点

选择器                        描述

$(":first-child")             选择所有父级元素下的第一个子元素

$(":last-child")              选择所有父级元素下的最后一个子元素

$(":only-child")              如果某个元素是其父元素的唯一子元素，那么他就会被选中

$(":nth-child")               选择的他们所有父元素的第n个子元素

$(":nth-last-chlid")          选择所有他们父元素的第n个子元素。计数从最后一个元素开始到第一个





jQuery选择器之表单元素选择器

无论是提交还是传递数据，表单元素在动态交互页面的作用是非常重要的。jQuery中专门加入了表单选择器，从而能够极其方便地获取到某个类型的表单元素

选择器             描述

$(":input")        选择所有input，textarea，select和button元素

$(":text")         匹配所有文本框

$(":password")     匹配所有密码框

$(":radio")        匹配所有单选按钮

$(":checkbox")     匹配所有复选框

$(":submit")       匹配所有提交按钮

$(":image")        匹配所有图像域

$(":reset")        匹配所有前置按钮

$(":button")       匹配所有按钮

$(":file")         匹配所有文件域



jQuery选择器之表单对象属性筛选选择器

除了表单元素选择器外，表单对象属性筛选选择器也是专门针对表单元素的选择器，可以附加在其他选择器的后面，主要功能是对所选择的表单元素进行筛选


选择器          描述

$(":enabled")   选择可用的表单元素

$(":disabled")  选择不可取的表单元素

$(":checked")   选择被选中的<input>元素

$(":selected")  选择被选中的<option>元素


注意事项：

1.选择器适用于复选框和单选框，对于下拉框元素, 使用 :selected 选择器
2.在某些浏览器中，选择器:checked可能会错误选取到<option>元素，所以保险起见换用选择器input:checked，确保只会选取<input>元素




jQuery选择器之特殊选择器this：
this，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。
$(this),代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值。



.attr()与.removeAttr()

jQuery中用attr()方法来获取和设置元素属性

attr()有4个表达式

attr(传入属性名)：获取属性的值
attr(属性名, 属性值)：设置属性的值
attr(属性名,函数值)：设置属性的函数值
attr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属


removeAttr()删除方法：

.removeAttr( attributeName ) : 为匹配的元素集合中的每个元素中移除一个属性（attribute）


.html()与.text()读取、修改元素的html结构或者元素的文本内容

.html()方法 

获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法：

.html() 不传入值，就是获取集合中第一个匹配元素的HTML内容
.html( htmlString )  设置每一个匹配元素的html内容
.html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数

这个操作是针对整个HTML内容（不仅仅只是文本内容）




.text()方法

得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。，具体有3种用法：

.text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代
.text( textString ) 用于设置匹配元素内容的文本
.text( function(index, text) ) 用来返回设置文本内容的一个函数

.text()结果返回一个字符串，包含所有匹配元素的合并文本



.val()方法主要是用于处理表单元素的值，比如 input, select 和 textarea

.val()方法

.val()无参数，获取匹配的元素集合中第一个元素的当前值
.val( value )，设置匹配的元素集合中每个元素的值
.val( function ) ，一个用来返回设置值的函数


 注意事项：
1. 通过.val()处理select元素， 当没有选择项被选中，它返回null
2. .val()方法多用来设置表单的字段的值
3. 如果select元素有multiple（多选）属性，并且至少一个选择项被选中， .val()方法返回一个数组，这个数组包含每个选中选择项的值


.html(),.text()和.val()的差异总结：  
1. .html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的"value"值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的"value"值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。
2. .html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。
.html(),.text(),.val()都可以使用回调函数的返回值来动态的3. 改变多个元素的内容。



.addClass()方法，用于动态增加class类名

.addClass( className )方法

1. .addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名
2. .addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名

.addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上


.removeClass()，它的作用是从匹配的元素中删除全部或者指定的class

.removeClass( )方法

1. .removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名
2. .removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名

注意事项

如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除




.toggleClass方法动态添加删除Class，一次执行相当于addClass，再次执行相当于removeClass

.toggleClass( )方法：在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类

1. .toggleClass( className )：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名
2. .toggleClass( className, switch )：一个布尔值，用于判断样式是否应该被添加或移除
3. .toggleClass( [switch ] )：一个用来判断样式类添加还是移除的 布尔值
4. .toggleClass( function(index, class, switch) [, switch ] )：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数


注意事项：

1. toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加
2.toggleClass会保留原有的Class名后新增，通过空格隔开





.css()方法：获取元素样式属性的计算值或者设置元素的CSS属性

获取：

1. .css( propertyName ) ：获取匹配元素集合中的第一个元素的样 属性的计算值
2. .css( propertyNames )：传递一组数组，返回一个对象结果


设置：

1. .css(propertyName, value )：设置CSS
2. .css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理
3. .css( properties )：可以传一个对象，同时设置多个样式


注意事项：

1. 浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px
2. .css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理
3. 当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css("width",50}) 与 .css("width","50px"})一样





jQuery的属性与样式之.css()与.addClass()设置样式的区别：

可维护性：

.addClass()的本质是通过定义个class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式

通过.addClass()我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过.css()方法就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦

灵活性：

通过.css()方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过.css()方法处理的

样式值：

.addClass()本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。

样式的优先级：

css的样式是有优先级的，当外部样式、内部样式和内联样式同一样式规则同时应用于同一个元素的时候，优先级如下

外部样式 < 内部样式 < 内联样式
.addClass()方法是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上
通过.css()方法处理的是内联样式，直接通过元素的style属性附加到元素上的
通过.css方法设置的样式属性优先级要高于.addClass方法


总结：

.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则
如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式


